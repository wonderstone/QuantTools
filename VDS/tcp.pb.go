// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: tcp.proto

package vdsdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//len(4)byte+protobuf
//约定symbol格式为 XXXXXX.SH(SZ\BJ)
//所有请求入口
type VDSTcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itype    VDSInterfaceType `protobuf:"varint,1,opt,name=itype,proto3,enum=VDSInterfaceType" json:"itype,omitempty"` //接口类型
	Data     []byte           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                          //协议数据
	Userdata []byte           `protobuf:"bytes,6,opt,name=userdata,proto3" json:"userdata,omitempty"`                  //用户参数，透传返回
}

func (x *VDSTcp) Reset() {
	*x = VDSTcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSTcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSTcp) ProtoMessage() {}

func (x *VDSTcp) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSTcp.ProtoReflect.Descriptor instead.
func (*VDSTcp) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

func (x *VDSTcp) GetItype() VDSInterfaceType {
	if x != nil {
		return x.Itype
	}
	return VDSInterfaceType_ReqLogon
}

func (x *VDSTcp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VDSTcp) GetUserdata() []byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

type VDSRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      int32            `protobuf:"varint,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Itype    VDSInterfaceType `protobuf:"varint,3,opt,name=itype,proto3,enum=VDSInterfaceType" json:"itype,omitempty"` //接口类型
	Data     []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                          //协议数据
	Userdata string           `protobuf:"bytes,5,opt,name=userdata,proto3" json:"userdata,omitempty"`                  //用户参数，透传返回
}

func (x *VDSRsp) Reset() {
	*x = VDSRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSRsp) ProtoMessage() {}

func (x *VDSRsp) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSRsp.ProtoReflect.Descriptor instead.
func (*VDSRsp) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *VDSRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VDSRsp) GetMsg() int32 {
	if x != nil {
		return x.Msg
	}
	return 0
}

func (x *VDSRsp) GetItype() VDSInterfaceType {
	if x != nil {
		return x.Itype
	}
	return VDSInterfaceType_ReqLogon
}

func (x *VDSRsp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VDSRsp) GetUserdata() string {
	if x != nil {
		return x.Userdata
	}
	return ""
}

//订阅类请求
type VDSSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string     `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                    //代码
	Exch    Exch       `protobuf:"varint,2,opt,name=exch,proto3,enum=Exch" json:"exch,omitempty"`             //市场
	Sectype VDSSecType `protobuf:"varint,3,opt,name=sectype,proto3,enum=VDSSecType" json:"sectype,omitempty"` //标的分类
}

func (x *VDSSub) Reset() {
	*x = VDSSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSSub) ProtoMessage() {}

func (x *VDSSub) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSSub.ProtoReflect.Descriptor instead.
func (*VDSSub) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{2}
}

func (x *VDSSub) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *VDSSub) GetExch() Exch {
	if x != nil {
		return x.Exch
	}
	return Exch_SZ
}

func (x *VDSSub) GetSectype() VDSSecType {
	if x != nil {
		return x.Sectype
	}
	return VDSSecType_STOCK
}

//登录
type VDSLogon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //用户名
	Passwd string `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"` //密码
}

func (x *VDSLogon) Reset() {
	*x = VDSLogon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSLogon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSLogon) ProtoMessage() {}

func (x *VDSLogon) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSLogon.ProtoReflect.Descriptor instead.
func (*VDSLogon) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{3}
}

func (x *VDSLogon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VDSLogon) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

//请求静态码表 itype=ReqStatCode
type VDSReqStatCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`        //代码
	Exch   Exch   `protobuf:"varint,2,opt,name=exch,proto3,enum=Exch" json:"exch,omitempty"` //市场
}

func (x *VDSReqStatCode) Reset() {
	*x = VDSReqStatCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSReqStatCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSReqStatCode) ProtoMessage() {}

func (x *VDSReqStatCode) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSReqStatCode.ProtoReflect.Descriptor instead.
func (*VDSReqStatCode) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4}
}

func (x *VDSReqStatCode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *VDSReqStatCode) GetExch() Exch {
	if x != nil {
		return x.Exch
	}
	return Exch_SZ
}

type VDSRspStatCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dots []*VDSStatCode `protobuf:"bytes,1,rep,name=dots,proto3" json:"dots,omitempty"` //码表列表
}

func (x *VDSRspStatCode) Reset() {
	*x = VDSRspStatCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSRspStatCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSRspStatCode) ProtoMessage() {}

func (x *VDSRspStatCode) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSRspStatCode.ProtoReflect.Descriptor instead.
func (*VDSRspStatCode) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5}
}

func (x *VDSRspStatCode) GetDots() []*VDSStatCode {
	if x != nil {
		return x.Dots
	}
	return nil
}

type VDSReqKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string       `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"` //代码
	Ktype  VDSKLineType `protobuf:"varint,2,opt,name=ktype,proto3,enum=VDSKLineType" json:"ktype,omitempty"`
	Start  int32        `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End    int32        `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Count  int32        `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *VDSReqKLine) Reset() {
	*x = VDSReqKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSReqKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSReqKLine) ProtoMessage() {}

func (x *VDSReqKLine) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSReqKLine.ProtoReflect.Descriptor instead.
func (*VDSReqKLine) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{6}
}

func (x *VDSReqKLine) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *VDSReqKLine) GetKtype() VDSKLineType {
	if x != nil {
		return x.Ktype
	}
	return VDSKLineType_KLINE_MIN1
}

func (x *VDSReqKLine) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *VDSReqKLine) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *VDSReqKLine) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type VDSRspKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dots []*VDSKLine `protobuf:"bytes,1,rep,name=dots,proto3" json:"dots,omitempty"` //码表列表
}

func (x *VDSRspKLine) Reset() {
	*x = VDSRspKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDSRspKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDSRspKLine) ProtoMessage() {}

func (x *VDSRspKLine) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDSRspKLine.ProtoReflect.Descriptor instead.
func (*VDSRspKLine) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{7}
}

func (x *VDSRspKLine) GetDots() []*VDSKLine {
	if x != nil {
		return x.Dots
	}
	return nil
}

var File_tcp_proto protoreflect.FileDescriptor

var file_tcp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x64, 0x65, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x06, 0x56, 0x44, 0x53, 0x54, 0x63, 0x70, 0x12, 0x27, 0x0a,
	0x05, 0x69, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x56,
	0x44, 0x53, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x56, 0x44, 0x53, 0x52, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x56, 0x44, 0x53, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x62, 0x0a, 0x06, 0x56, 0x44, 0x53, 0x53, 0x75, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x04, 0x65, 0x78, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x05, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x52, 0x04, 0x65, 0x78, 0x63, 0x68, 0x12, 0x25, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x56, 0x44, 0x53, 0x53, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x08, 0x56, 0x44, 0x53, 0x4c, 0x6f, 0x67, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x22, 0x43, 0x0a, 0x0e,
	0x56, 0x44, 0x53, 0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x04, 0x65, 0x78, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x52, 0x04, 0x65, 0x78, 0x63,
	0x68, 0x22, 0x32, 0x0a, 0x0e, 0x56, 0x44, 0x53, 0x52, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x44, 0x53, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x64, 0x6f, 0x74, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0b, 0x56, 0x44, 0x53, 0x52, 0x65, 0x71,
	0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a,
	0x05, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x56,
	0x44, 0x53, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6b, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x2c, 0x0a, 0x0b, 0x56, 0x44, 0x53, 0x52, 0x73, 0x70, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x1d, 0x0a, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x56, 0x44, 0x53, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x76, 0x64, 0x73, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tcp_proto_rawDescOnce sync.Once
	file_tcp_proto_rawDescData = file_tcp_proto_rawDesc
)

func file_tcp_proto_rawDescGZIP() []byte {
	file_tcp_proto_rawDescOnce.Do(func() {
		file_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_tcp_proto_rawDescData)
	})
	return file_tcp_proto_rawDescData
}

var file_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tcp_proto_goTypes = []interface{}{
	(*VDSTcp)(nil),         // 0: VDSTcp
	(*VDSRsp)(nil),         // 1: VDSRsp
	(*VDSSub)(nil),         // 2: VDSSub
	(*VDSLogon)(nil),       // 3: VDSLogon
	(*VDSReqStatCode)(nil), // 4: VDSReqStatCode
	(*VDSRspStatCode)(nil), // 5: VDSRspStatCode
	(*VDSReqKLine)(nil),    // 6: VDSReqKLine
	(*VDSRspKLine)(nil),    // 7: VDSRspKLine
	(VDSInterfaceType)(0),  // 8: VDSInterfaceType
	(Exch)(0),              // 9: Exch
	(VDSSecType)(0),        // 10: VDSSecType
	(*VDSStatCode)(nil),    // 11: VDSStatCode
	(VDSKLineType)(0),      // 12: VDSKLineType
	(*VDSKLine)(nil),       // 13: VDSKLine
}
var file_tcp_proto_depIdxs = []int32{
	8,  // 0: VDSTcp.itype:type_name -> VDSInterfaceType
	8,  // 1: VDSRsp.itype:type_name -> VDSInterfaceType
	9,  // 2: VDSSub.exch:type_name -> Exch
	10, // 3: VDSSub.sectype:type_name -> VDSSecType
	9,  // 4: VDSReqStatCode.exch:type_name -> Exch
	11, // 5: VDSRspStatCode.dots:type_name -> VDSStatCode
	12, // 6: VDSReqKLine.ktype:type_name -> VDSKLineType
	13, // 7: VDSRspKLine.dots:type_name -> VDSKLine
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_tcp_proto_init() }
func file_tcp_proto_init() {
	if File_tcp_proto != nil {
		return
	}
	file_def_proto_init()
	file_statcode_proto_init()
	file_kline_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSTcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSLogon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSReqStatCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSRspStatCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSReqKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDSRspKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tcp_proto_goTypes,
		DependencyIndexes: file_tcp_proto_depIdxs,
		MessageInfos:      file_tcp_proto_msgTypes,
	}.Build()
	File_tcp_proto = out.File
	file_tcp_proto_rawDesc = nil
	file_tcp_proto_goTypes = nil
	file_tcp_proto_depIdxs = nil
}
